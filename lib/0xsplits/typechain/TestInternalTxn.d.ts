/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';
import {TypedEventFilter, TypedEvent, TypedListener} from './commons';

interface TestInternalTxnInterface extends ethers.utils.Interface {
  functions: {
    'create(address[],uint32[],uint32,address)': FunctionFragment;
    'update(address,address[],uint32[],uint32)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'create',
    values: [string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;

  events: {};
}

export class TestInternalTxn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestInternalTxnInterface;

  functions: {
    create(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    update(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  create(
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    controller: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  update(
    split: string,
    accounts: string[],
    percentAllocations: BigNumberish[],
    distributorFee: BigNumberish,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    create(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    update(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      controller: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    update(
      split: string,
      accounts: string[],
      percentAllocations: BigNumberish[],
      distributorFee: BigNumberish,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
